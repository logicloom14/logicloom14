from clearml import InputModel

def download_model(project_name, model_name,dataset_project,dataset_name):
    # Query all models in the project
    model:InputModel = InputModel(project=project_name, name=model_name)
    path = model.get_local_copy()
    print(path)
    dataset = Dataset.get(dataset_project=dataset_project, dataset_name=dataset_name)
    dataset_path = dataset.get_local_copy()
    print(dataset_path)
    return path,dataset_path

model_file, labels_folder = download_model("AttendanceAI", "Model Training","AttendanceAI","labels")


from IPython.display import display, Javascript, Image
from google.colab.output import eval_js
from base64 import b64decode
import numpy as np
from PIL import Image
import io

def take_photo(filename='photo.jpg', quality=0.8):
  js = Javascript('''
    async function takePhoto(quality) {
      const div = document.createElement('div');
      const capture = document.createElement('button');
      capture.textContent = 'Capture';
      div.appendChild(capture);

      const video = document.createElement('video');
      video.style.display = 'block';
      const stream = await navigator.mediaDevices.getUserMedia({video: true});

      document.body.appendChild(div);
      div.appendChild(video);
      video.srcObject = stream;
      await video.play();

      // Resize the output to fit the video element.
      google.colab.output.setIframeHeight(document.documentElement.scrollHeight, true);

      // Wait for Capture to be clicked.
      await new Promise((resolve) => capture.onclick = resolve);

      const canvas = document.createElement('canvas');
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      canvas.getContext('2d').drawImage(video, 0, 0);
      stream.getVideoTracks()[0].stop();
      div.remove();
      return canvas.toDataURL('image/jpeg', quality);
    }
    ''')
  display(js)
  data = eval_js('takePhoto({})'.format(quality))
  binary = b64decode(data.split(',')[1])
  with open(filename, 'wb') as f:
    f.write(binary)
  return filename

# After defining the function, you can use it to capture a photo
image_path = take_photo() # Captures a photo.


from keras.preprocessing import image

def preprocess_image(img_path, target_size=(224, 224)):
    img = image.load_img(img_path, target_size=target_size)
    img_tensor = image.img_to_array(img)
    img_tensor = np.expand_dims(img_tensor, axis=0)
    img_tensor /= 255.0  # Normalize the image
    return img_tensor

# Assuming 'image_path' is the path to the captured image
img_tensor = preprocess_image(image_path)


import pickle
tensorflow_model_path = os.path.join(model_file)
model = tf.keras.models.load_model(tensorflow_model_path)
predictions = model.predict(img_tensor)
predicted_class = np.argmax(predictions, axis=1)
label_encoder = pickle.load(open(os.path.join(labels_folder, "label_encoder.pkl"), 'rb'))
label = label_encoder.inverse_transform(predicted_class)
print("Predicted label:", label)
